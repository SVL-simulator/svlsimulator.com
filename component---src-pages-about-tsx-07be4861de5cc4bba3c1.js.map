{"version":3,"sources":["webpack:///./src/pages/about.tsx","webpack:///./src/components/Center.tsx","webpack:///./src/components/Button.tsx"],"names":["HeroGrid","withTheme","styled","Grid","HeadingWrapper","str","i","variant","key","TypoWrapper","paragraph","About","useTranslation","t","tMap","title","height","container","alignItems","justify","maxWidth","item","xs","sm","mb","only","StyledCenter","rest","undefined","theme","px","spacing","Center","StyledButton","MuiButton","Button","React","forwardRef","props","ref","ButtonGetDemo","color","ButtonReadMore","buttonVariant"],"mappings":"6FAAA,4MAaMA,EAAWC,YAAUC,YAAOC,KAAR,sEAACD,CAAD,mBAIpBE,EAAsC,SAACC,EAAKC,GAAN,OAC1C,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,IAAG,UAAYF,GACrCD,IAICI,EAAmC,SAACJ,EAAKC,GAAN,OACvC,kBAAC,IAAD,CAAYI,WAAS,EAACF,IAAG,YAAcF,GACpCD,IAIU,SAASM,IAAQ,MACVC,cAAZC,EADsB,EACtBA,EAAGC,EADmB,EACnBA,KACX,OACE,kBAAC,IAAD,CAAMC,MAAOF,EAAE,gBACb,kBAAC,IAAD,CAAKG,OAAO,QACV,kBAAChB,EAAD,CAAUiB,WAAS,EAACC,WAAW,SAASC,QAAQ,UAC9C,kBAAC,IAAD,CAAQC,SAAU,KAChB,kBAAC,IAAD,CAAYb,QAAQ,MAAMM,EAAE,kBAIlC,kBAAC,IAAD,CAAMI,WAAS,GACb,kBAAC,IAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKC,GAAI,GACP,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,IAAD,CAAYjB,QAAQ,YAAYM,EAAE,yBAEnCC,EAAK,qBAAsBV,IAE9B,kBAAC,IAAD,CAAKoB,GAAI,GACP,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,IAAD,CAAYjB,QAAQ,YAAYM,EAAE,wBAEnCC,EAAK,oBAAqBV,IAE7B,kBAAC,IAAD,CAAKoB,GAAI,GACP,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAQC,KAAK,MACX,kBAAC,IAAD,CAAMJ,MAAI,EAACE,GAAI,KAEjB,kBAAC,IAAD,CAAMF,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKC,GAAI,GAAIV,EAAK,gBAAiBL,MAIvC,kBAAC,IAAD,S,uHCxDAiB,EAAezB,YAAUC,aAAO,gBAAGkB,EAAH,EAAGA,SAAaO,EAAhB,mCACpC,kBAAC,IAAD,iBAAeA,EAAf,CAAqBP,SAA8B,iBAAbA,EAAwBA,OAAWQ,QAD7C,uEAAC1B,CAAD,2BAI1B,gBAAGkB,EAAH,EAAGA,SAAUS,EAAb,EAAaA,MAAb,MAA8C,iBAAbT,EAAP,cAA6CU,YAAGD,EAAME,QAAQX,IAA9D,IAA8E,OAK7FY,IAFA,SAAC,GAAD,IAAGZ,EAAH,EAAGA,SAAaO,EAAhB,mCAAwC,kBAACD,EAAD,iBAAkBC,EAAlB,CAAwBP,SAAUA,O,kCCjBzF,yJAQMa,EAAehC,YAAUC,YAAOgC,KAAR,2EAAChC,CAAD,OAExBiC,EAAuDC,IAAMC,YAAW,SAACC,EAAOC,GAAR,OAC5E,kBAACN,EAAD,eAAc1B,QAAQ,YAAe+B,EAArC,CAA4CC,IAAKA,QAG7CC,EAA+BJ,IAAMC,YAAW,SAACC,EAAOC,GAAQ,IAC5D1B,EAAMD,cAANC,EACR,OACE,kBAACsB,EAAD,eAAQM,MAAM,UAAUlC,QAAQ,aAAgB+B,EAAhD,CAAuDC,IAAKA,IACzD1B,EAAE,4BAKH6B,EAAoCN,IAAMC,YAAW,SAACC,EAAOC,GAAQ,IACjE1B,EAAMD,cAANC,EACR,OACE,kBAAC,IAAD,eAAY8B,cAAc,YAAeL,EAAzC,CAAgDC,IAAKA,IAClD1B,EAAE,6BAKMsB","file":"component---src-pages-about-tsx-07be4861de5cc4bba3c1.js","sourcesContent":["import { Hidden, withTheme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { MapFunction } from 'src/@types/utils';\nimport { ButtonGetDemo } from 'src/components/Button';\nimport Center from 'src/components/Center';\nimport Page from 'src/components/Page';\nimport SubscribeBox from 'src/components/SubscribeBox';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport styled from 'styled-components';\n\nconst HeroGrid = withTheme(styled(Grid)`\n  height: 100%;\n`);\n\nconst HeadingWrapper: MapFunction<string> = (str, i) => (\n  <Typography variant='h5' key={`heading${i}`}>\n    {str}\n  </Typography>\n);\n\nconst TypoWrapper: MapFunction<string> = (str, i) => (\n  <Typography paragraph key={`paragraph${i}`}>\n    {str}\n  </Typography>\n);\n\nexport default function About() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page title={t('about.title')}>\n      <Box height='70vh'>\n        <HeroGrid container alignItems='center' justify='center'>\n          <Center maxWidth={100}>\n            <Typography variant='h4'>{t('about.body')}</Typography>\n          </Center>\n        </HeroGrid>\n      </Box>\n      <Grid container>\n        <Grid item xs={12} sm={5}>\n          <Box mb={7}>\n            <Box mb={2}>\n              <Typography variant='overline'>{t('about.mission.title')}</Typography>\n            </Box>\n            {tMap('about.mission.body', HeadingWrapper)}\n          </Box>\n          <Box mb={7}>\n            <Box mb={2}>\n              <Typography variant='overline'>{t('about.vision.title')}</Typography>\n            </Box>\n            {tMap('about.vision.body', HeadingWrapper)}\n          </Box>\n          <Box mb={7}>\n            <ButtonGetDemo />\n          </Box>\n        </Grid>\n        <Hidden only='xs'>\n          <Grid item sm={1} />\n        </Hidden>\n        <Grid item xs={12} sm={6}>\n          <Box mb={7}>{tMap('about.details', TypoWrapper)}</Box>\n        </Grid>\n      </Grid>\n\n      <SubscribeBox />\n    </Page>\n  );\n}\n","import Container, { ContainerProps } from '@material-ui/core/Container';\nimport { useTheme, withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { px } from 'src/utils/theme';\nimport styled from 'styled-components';\n\ninterface CenterProps extends Omit<ContainerProps, 'maxWidth'> {\n  maxWidth?: ContainerProps['maxWidth'] | number;\n}\n\nconst StyledCenter = withTheme(styled(({ maxWidth, ...rest }) => (\n  <Container {...rest} maxWidth={typeof maxWidth !== 'number' ? maxWidth : undefined} />\n))`\n  text-align: center;\n  ${({ maxWidth, theme }) => (typeof maxWidth === 'number' ? `max-width: ${px(theme.spacing(maxWidth))};` : '')}\n`);\n\nconst Center = ({ maxWidth, ...rest }: CenterProps) => <StyledCenter {...rest} maxWidth={maxWidth} />;\n\nexport default Center;\nexport { Center };\n","import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport Link from './Link';\nimport LinkButton, { LinkButtonProps } from './LinkButton';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button: React.ForwardRefExoticComponent<ButtonProps> = React.forwardRef((props, ref) => (\n  <StyledButton variant='outlined' {...props} ref={ref} />\n));\n\nconst ButtonGetDemo: typeof Button = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore: typeof LinkButton = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <LinkButton buttonVariant='outlined' {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </LinkButton>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n"],"sourceRoot":""}