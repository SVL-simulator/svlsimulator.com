{"version":3,"sources":["webpack:///./src/pages/product/digitaltwin.tsx","webpack:///./src/components/Button.tsx","webpack:///./src/components/Section.tsx"],"names":["TypoWrapper","str","DigitalTwin","useTranslation","t","tMap","title","variant","buttonText","flip","StyledButton","withTheme","styled","MuiButton","Button","React","forwardRef","props","ref","ButtonGetDemo","color","ButtonReadMore","SectionContainer","Container","theme","px","spacing","StyledPaper","Paper","Image","Box","Content","button","children","container","direction","item","Section","component","elevation","xs","md","p"],"mappings":"sNAMMA,EAAc,SAACC,GAAD,OAAiB,cAAC,IAAD,UAAaA,KAEnC,SAASC,IAAc,MAChBC,cAAZC,EAD4B,EAC5BA,EAAGC,EADyB,EACzBA,KACX,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAASC,MAAOF,EAAE,qBAAsBG,QAAQ,KAAKC,WAAW,UAAhE,SACGH,EAAK,mBAAoBL,KAG5B,cAAC,IAAD,CAASM,MAAOF,EAAE,8BAA+BK,MAAI,EAArD,SACGJ,EAAK,4BAA6BL,KAGrC,cAAC,IAAD,CAASM,MAAOF,EAAE,8BAAlB,SAAkDC,EAAK,4BAA6BL,U,2LCdpFU,EAAeC,YAAUC,YAAOC,KAAR,uEAACD,CAAD,OAExBE,EAASC,IAAMC,YAAW,SAACC,EAAoBC,GAArB,OAA6B,cAACR,EAAD,eAAcH,QAAQ,YAAeU,EAArC,CAA4CC,IAAKA,QAExGC,EAAgBJ,IAAMC,YAAW,SAACC,EAAoBC,GAAQ,IAC1Dd,EAAMD,cAANC,EACR,OACE,cAACU,EAAD,eAAQM,MAAM,UAAUb,QAAQ,aAAgBU,EAAhD,CAAuDC,IAAKA,EAA5D,SACGd,EAAE,8BAKHiB,EAAiBN,IAAMC,YAAW,SAACC,EAAoBC,GAAQ,IAC3Dd,EAAMD,cAANC,EACR,OACE,cAACU,EAAD,iBAAYG,EAAZ,CAAmBC,IAAKA,EAAxB,SACGd,EAAE,+BAKMU,O,4MCjBTQ,EAAmBX,YAAUC,YAAOW,KAAR,gFAACX,CAAD,sDACf,gBAAGY,EAAH,EAAGA,MAAH,OAAeC,YAAGD,EAAME,QAAQ,QAM7CC,EAAchB,YAAUC,YAAOgB,KAAR,2EAAChB,CAAD,OAEvBiB,EAAQlB,YAAUC,YAAOkB,KAAR,qEAAClB,CAAD,mHAcjBmB,EAAU,SAAC,GAAkE,IAC7EC,EADaxB,EAAgE,EAAhEA,WAAYyB,EAAoD,EAApDA,SAAU3B,EAA0C,EAA1CA,MAA0C,IAAnCC,eAAmC,MAAzB,KAAyB,EAEjF,OAAQC,GACN,IAAK,UACHwB,EAAS,cAAC,IAAD,IACT,MACF,IAAK,WACHA,EAAS,cAAC,IAAD,IACT,MACF,QACEA,EAAS,cAAC,IAAD,UAASxB,IAEtB,OACE,eAAC,IAAD,CAAM0B,WAAS,EAACC,UAAU,SAAST,QAAS,EAA5C,UACE,cAAC,IAAD,CAAMU,MAAI,EAAV,SACE,cAAC,IAAD,CAAY7B,QAASA,EAArB,SAA+BD,MAEjC,cAAC,IAAD,CAAM8B,MAAI,EAAV,SAAYH,IACXzB,GAAc,cAAC,IAAD,CAAM4B,MAAI,EAAV,SAAYJ,QA4BlBK,IAnBC,SAAC,GAAD,IAAG7B,EAAH,EAAGA,WAAYyB,EAAf,EAAeA,SAAUxB,EAAzB,EAAyBA,KAAMH,EAA/B,EAA+BA,MAAOC,EAAtC,EAAsCA,QAAtC,OACd,cAACe,EAAD,CAAkBgB,UAAU,UAA5B,SACE,cAACX,EAAD,CAAaY,UAAW,EAAxB,SACE,eAAC,IAAD,CAAML,WAAS,EAACR,QAAS,EAAGS,UAAW1B,EAAO,cAAgB,MAA9D,UACE,cAAC,IAAD,CAAM2B,MAAI,EAACI,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACZ,EAAD,MAEF,cAAC,IAAD,CAAMO,MAAI,EAACI,GAAI,GAAIC,GAAI,EAAvB,SACE,cAAC,IAAD,CAAKC,EAAG,EAAR,SACE,cAACX,EAAD,CAASzB,MAAOA,EAAOE,WAAYA,EAAYD,QAASA,EAAxD,SACG0B","file":"component---src-pages-product-digitaltwin-tsx-13b63c8cfe2f51373ca7.js","sourcesContent":["import Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Page from 'src/components/Page';\nimport Section from 'src/components/Section';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst TypoWrapper = (str: string) => <Typography>{str}</Typography>;\n\nexport default function DigitalTwin() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page>\n      <Section title={t('digitaltwin.title')} variant='h2' buttonText='getDemo'>\n        {tMap('digitaltwin.body', TypoWrapper)}\n      </Section>\n\n      <Section title={t('digitaltwin.section1.title')} flip>\n        {tMap('digitaltwin.section1.body', TypoWrapper)}\n      </Section>\n\n      <Section title={t('digitaltwin.section2.title')}>{tMap('digitaltwin.section2.body', TypoWrapper)}</Section>\n    </Page>\n  );\n}\n","import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button = React.forwardRef((props: ButtonProps, ref) => <StyledButton variant='outlined' {...props} ref={ref} />);\n\nconst ButtonGetDemo = React.forwardRef((props: ButtonProps, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore = React.forwardRef((props: ButtonProps, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </Button>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n","import { withTheme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid, { GridProps } from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport React from 'react';\nimport { px } from 'src/utils/theme';\nimport Button, { ButtonReadMore, ButtonGetDemo } from 'src/components/Button';\nimport styled from 'styled-components';\n\nconst SectionContainer = withTheme(styled(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`);\n\nconst StyledPaper = withTheme(styled(Paper)``);\n\nconst Image = withTheme(styled(Box)`\n  height: 100%;\n  width: 100%;\n  background-image: linear-gradient(-205deg, white, #9c27b0 30%, black);\n  border-radius: 20px;\n`);\n\ntype ContentProps = {\n  buttonText?: string;\n  children: React.ReactNode;\n  direction?: GridProps['direction'];\n  title: string;\n  variant?: TypographyProps['variant'];\n};\nconst Content = ({ buttonText, children, title, variant = 'h5' }: ContentProps) => {\n  let button;\n  switch (buttonText) {\n    case 'getDemo':\n      button = <ButtonGetDemo />;\n      break;\n    case 'readMore':\n      button = <ButtonReadMore />;\n      break;\n    default:\n      button = <Button>{buttonText}</Button>;\n  }\n  return (\n    <Grid container direction='column' spacing={5}>\n      <Grid item>\n        <Typography variant={variant}>{title}</Typography>\n      </Grid>\n      <Grid item>{children}</Grid>\n      {buttonText && <Grid item>{button}</Grid>}\n    </Grid>\n  );\n};\n\ninterface SectionProps extends ContentProps {\n  flip?: boolean;\n}\n\nconst Section = ({ buttonText, children, flip, title, variant }: SectionProps) => (\n  <SectionContainer component='section'>\n    <StyledPaper elevation={3}>\n      <Grid container spacing={2} direction={flip ? 'row-reverse' : 'row'}>\n        <Grid item xs={12} md={6}>\n          <Image />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Box p={2}>\n            <Content title={title} buttonText={buttonText} variant={variant}>\n              {children}\n            </Content>\n          </Box>\n        </Grid>\n      </Grid>\n    </StyledPaper>\n  </SectionContainer>\n);\n\nexport default Section;\nexport { Section, Content as SectionContent };\n"],"sourceRoot":""}