{"version":3,"sources":["webpack:///./src/components/Button.tsx","webpack:///./src/components/Section.tsx","webpack:///./src/pages/product/cloud.tsx"],"names":["StyledButton","withTheme","styled","MuiButton","Button","React","forwardRef","props","ref","variant","ButtonGetDemo","t","useTranslation","color","ButtonReadMore","SectionContainer","Container","theme","px","spacing","StyledPaper","Paper","Image","Box","Content","button","buttonText","children","title","container","direction","item","Section","flip","tuckImage","component","elevation","xs","md","p","TypoWrapper","str","CloudSimAAS","tMap"],"mappings":"2FAAA,6IAMMA,EAAeC,YAAUC,YAAOC,KAAR,uEAACD,CAAD,OAExBE,EAASC,IAAMC,YAAW,SAACC,EAAoBC,GAArB,OAA6B,kBAACR,EAAD,eAAcS,QAAQ,YAAeF,EAArC,CAA4CC,IAAKA,QAExGE,EAAgBL,IAAMC,YAAW,SAACC,EAAoBC,GAAQ,IAC1DG,EAAMC,cAAND,EACR,OACE,kBAACP,EAAD,eAAQS,MAAM,UAAUJ,QAAQ,aAAgBF,EAAhD,CAAuDC,IAAKA,IACzDG,EAAE,4BAKHG,EAAiBT,IAAMC,YAAW,SAACC,EAAoBC,GAAQ,IAC3DG,EAAMC,cAAND,EACR,OACE,kBAACP,EAAD,iBAAYG,EAAZ,CAAmBC,IAAKA,IACrBG,EAAE,6BAKMP,O,kCC5Bf,uKAWMW,EAAmBd,YAAUC,YAAOc,KAAR,gFAACd,CAAD,sDACf,gBAAGe,EAAH,EAAGA,MAAH,OAAeC,YAAGD,EAAME,QAAQ,QAM7CC,EAAcnB,YAAUC,YAAOmB,KAAR,2EAACnB,CAAD,OAEvBoB,EAAQrB,YAAUC,YAAOqB,KAAR,qEAACrB,CAAD,oIAejBsB,EAAU,SAAC,GAAkE,IAC7EC,EADaC,EAAgE,EAAhEA,WAAYC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,MAA0C,IAAnCnB,eAAmC,MAAzB,KAAyB,EAEjF,OAAQiB,GACN,IAAK,UACHD,EAAS,kBAAC,IAAD,MACT,MACF,IAAK,WACHA,EAAS,kBAAC,IAAD,MACT,MACF,QACEA,EAAS,kBAAC,IAAD,KAASC,GAEtB,OACE,kBAAC,IAAD,CAAMG,WAAS,EAACC,UAAU,SAASX,QAAS,GAC1C,kBAAC,IAAD,CAAMY,MAAI,GACR,kBAAC,IAAD,CAAYtB,QAASA,GAAUmB,IAEjC,kBAAC,IAAD,CAAMG,MAAI,GAAEJ,GACXD,GAAc,kBAAC,IAAD,CAAMK,MAAI,GAAEN,KA6BlBO,IAnBC,SAAC,GAAD,IAAGN,EAAH,EAAGA,WAAYC,EAAf,EAAeA,SAAUM,EAAzB,EAAyBA,KAAML,EAA/B,EAA+BA,MAAkBnB,GAAjD,EAAsCyB,UAAtC,EAAiDzB,SAAjD,OACd,kBAACM,EAAD,CAAkBoB,UAAU,WAC1B,kBAACf,EAAD,CAAagB,UAAW,GACtB,kBAAC,IAAD,CAAMP,WAAS,EAACV,QAAS,EAAGW,UAAWG,EAAO,cAAgB,OAC5D,kBAAC,IAAD,CAAMF,MAAI,EAACM,GAAI,GAAIC,GAAI,GACrB,kBAAChB,EAAD,OAEF,kBAAC,IAAD,CAAMS,MAAI,EAACM,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKC,EAAG,GACN,kBAACf,EAAD,CAASI,MAAOA,EAAOF,WAAYA,EAAYjB,QAASA,GACrDkB,U,kCCzEf,wHAMMa,EAAc,SAACC,GAAD,OAAiB,kBAAC,IAAD,KAAaA,IAEnC,SAASC,IAAc,MAChB9B,cAAZD,EAD4B,EAC5BA,EAAGgC,EADyB,EACzBA,KACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASf,MAAOjB,EAAE,eAAgBF,QAAQ,KAAKiB,WAAW,WACvDiB,EAAK,aAAcH","file":"component---src-pages-product-cloud-tsx-2b2de6ec80cd4ca95a4e.js","sourcesContent":["import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button = React.forwardRef((props: ButtonProps, ref) => <StyledButton variant='outlined' {...props} ref={ref} />);\n\nconst ButtonGetDemo = React.forwardRef((props: ButtonProps, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore = React.forwardRef((props: ButtonProps, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </Button>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n","import { withTheme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid, { GridProps } from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport React from 'react';\nimport { px } from 'src/utils/theme';\nimport Button, { ButtonReadMore, ButtonGetDemo } from 'src/components/Button';\nimport styled from 'styled-components';\n\nconst SectionContainer = withTheme(styled(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`);\n\nconst StyledPaper = withTheme(styled(Paper)``);\n\nconst Image = withTheme(styled(Box)`\n  height: 100%;\n  width: 100%;\n  min-height: 300px;\n  background-image: linear-gradient(-205deg, white, #9c27b0 30%, black);\n  border-radius: 20px;\n`);\n\ntype ContentProps = {\n  buttonText?: string;\n  children: React.ReactNode;\n  direction?: GridProps['direction'];\n  title: string;\n  variant?: TypographyProps['variant'];\n};\nconst Content = ({ buttonText, children, title, variant = 'h5' }: ContentProps) => {\n  let button;\n  switch (buttonText) {\n    case 'getDemo':\n      button = <ButtonGetDemo />;\n      break;\n    case 'readMore':\n      button = <ButtonReadMore />;\n      break;\n    default:\n      button = <Button>{buttonText}</Button>;\n  }\n  return (\n    <Grid container direction='column' spacing={5}>\n      <Grid item>\n        <Typography variant={variant}>{title}</Typography>\n      </Grid>\n      <Grid item>{children}</Grid>\n      {buttonText && <Grid item>{button}</Grid>}\n    </Grid>\n  );\n};\n\ninterface SectionProps extends ContentProps {\n  flip?: boolean;\n  tuckImage?: boolean;\n}\n\nconst Section = ({ buttonText, children, flip, title, tuckImage, variant }: SectionProps) => (\n  <SectionContainer component='section'>\n    <StyledPaper elevation={0}>\n      <Grid container spacing={2} direction={flip ? 'row-reverse' : 'row'}>\n        <Grid item xs={12} md={6}>\n          <Image />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Box p={2}>\n            <Content title={title} buttonText={buttonText} variant={variant}>\n              {children}\n            </Content>\n          </Box>\n        </Grid>\n      </Grid>\n    </StyledPaper>\n  </SectionContainer>\n);\n\nexport default Section;\nexport { Section, Content as SectionContent };\n","import Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Page from 'src/components/Page';\nimport Section from 'src/components/Section';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst TypoWrapper = (str: string) => <Typography>{str}</Typography>;\n\nexport default function CloudSimAAS() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page>\n      <Section title={t('cloud.title')} variant='h2' buttonText='getDemo'>\n        {tMap('cloud.body', TypoWrapper)}\n      </Section>\n    </Page>\n  );\n}\n"],"sourceRoot":""}