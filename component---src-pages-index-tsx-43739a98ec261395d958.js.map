{"version":3,"sources":["webpack:///./src/hooks/useTranslations.ts","webpack:///./src/utils/index.ts","webpack:///./src/pages/index.tsx"],"names":["useTrans","t","useTranslation","tMap","useMemo","str","mapFn","val","Array","map","Center","themed","Home","my","color","variant","container","justify","item","xs"],"mappings":"2JAYMA,EAAW,WAAM,IACbC,EAAMC,cAAND,EAIFE,EAAOC,mBAAQ,kBAAM,SAACC,EAAaC,GAAd,OCZZC,EDYwEN,EAAEI,GCVpFE,aAAuBC,MAAcD,EACnC,CAACA,IDSuFE,IAAIH,GCZrF,IAACC,KDY4F,CAACN,IAE5G,MAAO,CAAEA,IAAGE,U,wSETd,IAAMO,EAASC,YAAO,MAAPA,CAAH,KAIG,SAASC,IAAO,IACrBX,EAAMC,cAAND,EACR,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,qBAEA,kBAAC,IAAD,CAAKY,GAAI,IACP,kBAACH,EAAD,KACE,kBAAC,IAAD,CAAQI,MAAM,UAAUC,QAAQ,aAC7Bd,EAAE,4BAKT,kBAAC,IAAD,CAAKY,GAAI,IACP,kBAAC,IAAD,CAAMG,WAAS,EAACC,QAAQ,cACtB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAYJ,QAAQ,MAApB,SACA,kBAAC,IAAD,yBACA,kBAAC,IAAD,CAAQD,MAAM,UAAUC,QAAQ,aAC7Bd,EAAE,4BAMX,kBAAC,IAAD,CAAKY,GAAI,IACP,kBAAC,IAAD,CAAMG,WAAS,EAACC,QAAQ,YACtB,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAYJ,QAAQ,MAApB,iBACA,kBAAC,IAAD,yBACA,kBAAC,IAAD,CAAQD,MAAM,UAAUC,QAAQ,aAC7Bd,EAAE,4BAMX,kBAAC,IAAD,CAAKY,GAAI,IACP,kBAAC,IAAD,CAAMG,WAAS,GACb,kBAAC,IAAD,CAAME,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAYJ,QAAQ,MAApB,QACA,kBAAC,IAAD,yBACA,kBAAC,IAAD,CAAQA,QAAQ,YAAhB,cAEF,kBAAC,IAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAYJ,QAAQ,MAApB,QACA,kBAAC,IAAD,yBACA,kBAAC,IAAD,CAAQA,QAAQ,YAAhB,cAEF,kBAAC,IAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAYJ,QAAQ,MAApB,QACA,kBAAC,IAAD,yBACA,kBAAC,IAAD,CAAQA,QAAQ,YAAhB","file":"component---src-pages-index-tsx-43739a98ec261395d958.js","sourcesContent":["import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next'; // UseTranslationResponse\nimport { asArray } from '../utils'; // UseTranslationResponse\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MapFunctionType = (element: any, index?: number, array?: any[]) => unknown;\n\ninterface TranslationMapArgs {\n  translationString: string;\n  mapFn: MapFunctionType;\n}\n\nconst useTrans = () => {\n  const { t } = useTranslation();\n\n  // `tMap` ensures that a translation string will be returned as an array with 1 or more elements.\n  // This allows you to stamp out multiple components dynamically, rather than manually.\n  const tMap = useMemo(() => (str: string, mapFn: MapFunctionType): unknown[] => asArray(t(str)).map(mapFn), [t]);\n\n  return { t, tMap };\n\n  // DEV NOTE: Retaining this just in case we need to augment the output of the standard `t` function. -BS\n  //\n  // const fancyT = (str) => {\n  //   const trans = t(str);\n  //   if (typeof trans === 'string') return trans;\n  //   return trans as string[];\n  // }\n  // return {t: fancyT};\n};\n\nexport default useTrans;\nexport { useTrans as useTranslation, asArray };\n","// Generic utility functions\n//\n\n// Ensures that regardless of what is passed in, you get an array back.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst asArray = (val: any | any[]) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((val as any) instanceof Array) return val;\n  return [val];\n};\n\nexport { asArray };\n","import React from 'react';\nimport Page from 'src/components/Page';\nimport Typography from '@material-ui/core/Typography';\n// import Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport { themed } from 'src/utils/theme';\n\nconst Center = themed('div')`\n  text-align: center;\n`;\n\nexport default function Home() {\n  const { t } = useTranslation();\n  return (\n    <Page>\n      <Typography>Hello world!</Typography>\n\n      <Box my={10}>\n        <Center>\n          <Button color='primary' variant='contained'>\n            {t('main.simulator.button')}\n          </Button>\n        </Center>\n      </Box>\n\n      <Box my={10}>\n        <Grid container justify='flex-start'>\n          <Grid item xs={6}>\n            <Typography variant='h3'>Tools</Typography>\n            <Typography>some description</Typography>\n            <Button color='primary' variant='contained'>\n              {t('main.buttons.getDemo')}\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box my={10}>\n        <Grid container justify='flex-end'>\n          <Grid item xs={6}>\n            <Typography variant='h3'>High-fidelity</Typography>\n            <Typography>some description</Typography>\n            <Button color='primary' variant='contained'>\n              {t('main.buttons.getDemo')}\n            </Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <Box my={10}>\n        <Grid container>\n          <Grid item xs={4}>\n            <Typography variant='h3'>Prod</Typography>\n            <Typography>some description</Typography>\n            <Button variant='outlined'>Read More</Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant='h3'>Prod</Typography>\n            <Typography>some description</Typography>\n            <Button variant='outlined'>Read More</Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant='h3'>Prod</Typography>\n            <Typography>some description</Typography>\n            <Button variant='outlined'>Read More</Button>\n          </Grid>\n        </Grid>\n      </Box>\n    </Page>\n  );\n}\n"],"sourceRoot":""}