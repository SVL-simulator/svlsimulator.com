{"version":3,"sources":["webpack:///./src/components/LayoutGrid.tsx","webpack:///./src/pages/news/index.tsx"],"names":["StyledBox","withTheme","styled","xs","sm","md","lg","xl","spacing","dense","rest","theme","px","breakpoints","up","LayoutGrid","props","newsBoxCategoryColors","news","event","article","announcement","newsItemProminence","normal","colSpan","rowSpan","big","biggest","StyledNewsBox","Paper","category","src","fade","palette","background","paper","only","FadeBox","Box","validateEnum","optionName","option","allowedList","Array","Object","keys","indexOf","console","error","join","NewsBox","children","link","title","t","useTranslation","externalLink","match","elevation","position","variant","alignSelf","mt","buttonVariant","to","target","undefined","queryNews","News","data","mb","allMdx","edges","map","id","frontmatter","headings","excerpt","slug","replace","bodyPreview","prominence","featuredImageSrc","featuredImage","childImageSharp","fluid","length","value","preview","slice","date","getNewsItemData","node","key"],"mappings":"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","file":"component---src-pages-news-index-tsx-c9291de484743d533d3a.js","sourcesContent":["import Box, { BoxProps } from '@material-ui/core/Box';\nimport { GridProps } from '@material-ui/core/Grid';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { px } from 'src/utils/theme';\n\ninterface LayoutGridProps {\n  xs?: GridProps['xs'];\n  sm?: GridProps['sm'];\n  md?: GridProps['md'];\n  lg?: GridProps['lg'];\n  xl?: GridProps['xl'];\n  spacing?: GridProps['spacing'];\n  dense?: boolean;\n}\n\nconst JustBox = ({ xs, sm, md, lg, xl, spacing, dense, ...rest }: LayoutGridProps) => <Box {...rest} />;\n\nconst StyledBox = withTheme(styled(JustBox)`\n  ${({ theme, xs, sm, md, lg, xl, spacing, dense }) => `\n  display: grid;\n  grid-gap: ${px(theme.spacing(spacing))};\n  ${dense ? 'grid-auto-flow: dense;' : ''}\n  // grid-template-columns: repeat(4, 1fr);\n\n  ${xs && theme.breakpoints.up('xs')} {\n    grid-template-columns: repeat(${xs}, 1fr);\n  }\n  ${sm && theme.breakpoints.up('sm')} {\n    grid-template-columns: repeat(${sm}, 1fr);\n  }\n  ${md && theme.breakpoints.up('md')} {\n    grid-template-columns: repeat(${md}, 1fr);\n  }\n  ${lg && theme.breakpoints.up('lg')} {\n    grid-template-columns: repeat(${lg}, 1fr);\n  }\n  ${xl && theme.breakpoints.up('xl')} {\n    grid-template-columns: repeat(${xs}, 1fr);\n  }\n`}\n`);\n\nconst LayoutGrid: React.FC<BoxProps & LayoutGridProps> = props => <StyledBox {...props} />;\n\nexport default LayoutGrid;\nexport { LayoutGrid };\n","import { withTheme } from '@material-ui/core';\nimport Box, { BoxProps } from '@material-ui/core/Box';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { graphql } from 'gatsby';\nimport React from 'react';\nimport LayoutGrid from 'src/components/LayoutGrid';\n// import Link from 'src/components/Link';\nimport LinkButton from 'src/components/LinkButton';\nimport Page from 'src/components/Page';\nimport SubscribeBox from 'src/components/SubscribeBox';\nimport { useTranslation } from 'src/hooks/useTranslations';\n// import imgPlaceholder from 'src/images/placeholder1.jpg';\nimport { fade, px } from 'src/utils/theme';\nimport styled from 'styled-components';\n// import Img from \"gatsby-image\";\nimport { NewsIndexQuery } from '../../../graphql-types';\n\nconst newsBoxCategoryColors = {\n  news: '',\n  event: 'rgba(0, 0, 255, 0.05)',\n  article: 'rgba(255, 255, 0, 0.05)',\n  announcement: 'rgba(0, 255, 0, 0.05)'\n} as const;\n\ntype NewsBoxCategory = keyof typeof newsBoxCategoryColors;\n\nconst newsItemProminence = {\n  normal: { colSpan: 1, rowSpan: 1 },\n  big: { colSpan: 2, rowSpan: 1 },\n  biggest: { colSpan: 4, rowSpan: 1 }\n} as const;\n\ntype NewsItemProminence = keyof typeof newsItemProminence;\n\ntype NewsItemNode = NewsIndexQuery['allMdx']['edges'][0]['node'];\n\ninterface NewsBoxProps extends PaperProps {\n  colSpan: number;\n  rowSpan: number;\n  category: NewsBoxCategory;\n  link?: string;\n  src?: string;\n}\n\ntype NewsItemData = {\n  bodyPreview: string;\n  category: NewsBoxProps['category'];\n  date?: Date;\n  featuredImageSrc?: string;\n  id: string;\n  link?: string;\n  prominence: NewsItemProminence;\n  title: string;\n};\n\nconst StyledNewsBox = withTheme(styled(Paper)<NewsBoxProps>`\n  ${({ theme, category, colSpan, rowSpan, src }) => `\n  grid-column-end: ${colSpan ? `span ${colSpan}` : 'auto'};\n  grid-row-end: ${rowSpan ? `span ${rowSpan}` : 'auto'};\n  padding: ${px(theme.spacing(2))};\n  // background-color: ${fade(theme.palette.background.paper, 0.6)};\n  background-color: transparent;\n  display: flex;\n  flex-direction: column;\n  height: 360px;\n  position: relative;\n  overflow: hidden;\n\n  ${theme.breakpoints.only('sm')} {\n    grid-column-end: ${colSpan > 2 ? 'auto' : `span ${colSpan}`};\n  }\n  ${theme.breakpoints.only('xs')} {\n    grid-column-end: ${colSpan > 1 ? 'auto' : `span ${colSpan}`};\n  }\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    // background-color: ${newsBoxCategoryColors[category]};\n    // background-color: ${fade(theme.palette.background.paper, 0.6)};\n    background-color: ${theme.palette.background.paper};\n    background-image: url(${src});\n    background-position: center center;\n    background-size: cover;\n    opacity: 0.4;\n    filter: blur(1px);\n    will-change: opacity, filter;\n  }\n  &:hover::before {\n    filter: blur(0);\n    opacity: 0.6;\n  }\n  `}\n`) as React.FC<NewsBoxProps>;\n\nconst FadeBox = withTheme(styled(Box)<BoxProps>`\n  overflow: hidden;\n  height: 100%;\n  mask-box-image: linear-gradient(to bottom, black calc(100% - 5em), transparent);\n  mask-box-image-width: 0 0 1em 0;\n`) as React.FC<BoxProps>;\n\nconst validateEnum = (optionName: string, option: string, allowedList: string[] | Record<string, unknown>) => {\n  if (!(allowedList instanceof Array)) {\n    // Just assume it's an object/hash until we care more later.\n    allowedList = Object.keys(allowedList);\n  }\n  // Check for known enum values\n  if (allowedList.indexOf(option) === -1) {\n    console.error('Unknown news %s: \"%s\". Use one of the following: %s.', optionName, option, allowedList.join(', '));\n    return false;\n  }\n  return true;\n};\n\nconst NewsBox = ({\n  children,\n  category = 'news',\n  colSpan = 1,\n  link,\n  rowSpan = 1,\n  title,\n  ...rest\n}: Partial<NewsBoxProps>) => {\n  const { t } = useTranslation();\n\n  // Check for known enum values\n  validateEnum('category', category, newsBoxCategoryColors);\n\n  const externalLink = link && link.match('://');\n\n  return (\n    <StyledNewsBox elevation={4} {...rest} category={category} colSpan={colSpan} rowSpan={rowSpan}>\n      <Box position='relative'>\n        <Typography variant='overline'>{t(`news.categories.${category}`)}</Typography>\n      </Box>\n      <FadeBox>\n        {title && <Typography variant='h5'>{title}</Typography>}\n        {children}\n      </FadeBox>\n      {link ? (\n        <Box alignSelf='start' mt='auto'>\n          <LinkButton buttonVariant='outlined' to={link} target={externalLink ? '_blank' : undefined}>\n            {t('main.buttons.readNews')}\n          </LinkButton>\n        </Box>\n      ) : null}\n    </StyledNewsBox>\n  );\n};\n\n// The generated typescript type from the below query automatically has \"Query\"\n// appended to the query name: \"NewsIndex\" -> \"NewsIndexQuery\", imported by name above.\nexport const queryNews = graphql`\n  query NewsIndex {\n    allMdx(limit: 10, sort: { fields: frontmatter___date }) {\n      edges {\n        node {\n          id\n          slug\n          headings {\n            value\n          }\n          excerpt\n          frontmatter {\n            title\n            date\n            category\n            link\n            preview\n            prominence\n            featuredImage {\n              childImageSharp {\n                fluid(maxHeight: 720) {\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst getNewsItemData: (arg0: NewsItemNode) => NewsItemData = ({ id, frontmatter, headings, excerpt, slug }) => {\n  const date = undefined;\n  const link = frontmatter?.link || slug?.replace(/^pages/, '') || undefined;\n  let title = '';\n  let bodyPreview = '';\n\n  // Set a default and assert that this (the incoming value and the default) are one of the enum options.\n  const category = ((frontmatter?.category || 'news') as unknown) as NewsItemData['category'];\n  const prominence = ((frontmatter?.prominence || 'normal') as unknown) as NewsItemData['prominence'];\n  const featuredImageSrc = frontmatter?.featuredImage?.childImageSharp?.fluid?.src || undefined;\n\n  if (frontmatter?.title) {\n    // Use the defined metadata title from the \"---\" section at the top\n    title = frontmatter.title;\n  } else if (headings?.length && headings[0] && headings[0].value) {\n    // Just grab the first heading off the MD file\n    title = headings[0].value;\n  }\n\n  if (frontmatter?.preview) {\n    bodyPreview = frontmatter?.preview;\n  } else if (excerpt) {\n    bodyPreview = excerpt.slice(title.length);\n  }\n\n  return {\n    bodyPreview,\n    category,\n    date,\n    featuredImageSrc,\n    id,\n    link,\n    prominence,\n    title\n  };\n};\n\nexport default function News({ data }: { data: NewsIndexQuery }) {\n  const { t } = useTranslation();\n\n  return (\n    <Page title={t('news.title')}>\n      <Box mt={{ xs: 2, md: 6 }} mb={4}>\n        <Typography variant='h3'>{t('news.title')}</Typography>\n      </Box>\n      <LayoutGrid sm={2} md={4} spacing={2} dense>\n        {data.allMdx.edges.map(({ node }: { node: NewsItemNode }) => {\n          const { id, title, bodyPreview, category, link, featuredImageSrc, prominence } = getNewsItemData(node);\n\n          // Check for known enum values\n          validateEnum('prominence', prominence, newsItemProminence);\n          const colSpan = newsItemProminence[prominence].colSpan;\n          const rowSpan = newsItemProminence[prominence].rowSpan;\n\n          return (\n            <NewsBox\n              key={id}\n              title={title}\n              src={featuredImageSrc}\n              category={category}\n              colSpan={colSpan}\n              rowSpan={rowSpan}\n              link={link}\n            >\n              <Typography>{bodyPreview}</Typography>\n            </NewsBox>\n          );\n        })}\n        {/* <NewsBox title='News 1' src={imgPlaceholder}>\n          <Typography>News 1 Body</Typography>\n          <Typography>\n            <Link to='/news/readme'>Go to example README</Link>\n          </Typography>\n        </NewsBox>\n        <NewsBox category='event'>\n          <Typography>\n            <Link to='/news/october-event'>Go to CES Event</Link>\n          </Typography>\n        </NewsBox>\n        <NewsBox colSpan={2} category='article'>\n          <Typography>News 3</Typography>\n          <Typography>\n            The component leverages the power of React and TypeScript, to provide the best UX, while manipulating an\n            unlimited set of data. It comes with an intuitive API for real-time updates, accessibility, as well as\n            theming and custom templates, all with blazing fast performance.\n          </Typography>\n        </NewsBox>\n        <NewsBox colSpan={2} category='announcement'>\n          <Typography>News 4</Typography>\n        </NewsBox>\n        <NewsBox category='news'>\n          <Typography>News 5</Typography>\n        </NewsBox>\n        <NewsBox category='article'>\n          <Typography>News 6</Typography>\n        </NewsBox> */}\n      </LayoutGrid>\n\n      <SubscribeBox />\n    </Page>\n  );\n}\n"],"sourceRoot":""}