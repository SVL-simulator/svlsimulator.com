{"version":3,"sources":["webpack:///./src/pages/product/digitaltwin.tsx","webpack:///./src/components/Button.tsx","webpack:///./src/components/Section.tsx"],"names":["TypoWrapper","str","paragraph","DigitalTwin","useTranslation","t","tMap","title","variant","buttonText","flip","StyledButton","withTheme","styled","MuiButton","Button","React","forwardRef","props","ref","ButtonGetDemo","color","ButtonReadMore","buttonVariant","SectionContainer","Container","theme","px","spacing","StyledPaper","Paper","Image","Box","Content","button","buttonProps","children","container","direction","item","my","Section","tuckImage","component","elevation","xs","md"],"mappings":"2FAAA,oIAOMA,EAAc,SAACC,GAAD,OAAiB,kBAAC,IAAD,CAAYC,WAAS,GAAED,IAE7C,SAASE,IAAc,MAChBC,cAAZC,EAD4B,EAC5BA,EAAGC,EADyB,EACzBA,KACX,OACE,kBAAC,IAAD,CAAMC,MAAOF,EAAE,sBACb,kBAAC,IAAD,CAASE,MAAOF,EAAE,qBAAsBG,QAAQ,KAAKC,WAAW,WAC7DH,EAAK,mBAAoBN,IAG5B,kBAAC,IAAD,CAASO,MAAOF,EAAE,8BAA+BK,MAAI,GAClDJ,EAAK,4BAA6BN,IAGrC,kBAAC,IAAD,CAASO,MAAOF,EAAE,+BAAgCC,EAAK,4BAA6BN,IAEpF,kBAAC,IAAD,S,kCCvBN,yJAQMW,EAAeC,YAAUC,YAAOC,KAAR,2EAACD,CAAD,OAExBE,EAA6CC,IAAMC,YAAW,SAACC,EAAOC,GAAR,OAClE,kBAACR,EAAD,eAAcH,QAAQ,YAAeU,EAArC,CAA4CC,IAAKA,QAG7CC,EAA+BJ,IAAMC,YAAW,SAACC,EAAOC,GAAQ,IAC5Dd,EAAMD,cAANC,EACR,OACE,kBAACU,EAAD,eAAQM,MAAM,UAAUb,QAAQ,aAAgBU,EAAhD,CAAuDC,IAAKA,IACzDd,EAAE,4BAKHiB,EAAoCN,IAAMC,YAAW,SAACC,EAAOC,GAAQ,IACjEd,EAAMD,cAANC,EACR,OACE,kBAAC,IAAD,eAAYkB,cAAc,YAAeL,EAAzC,CAAgDC,IAAKA,IAClDd,EAAE,6BAKMU,O,kCChCf,mLAaMS,EAAmBZ,YAAUC,YAAOY,KAAR,gFAACZ,CAAD,sDACf,gBAAGa,EAAH,EAAGA,MAAH,OAAeC,YAAGD,EAAME,QAAQ,QAM7CC,EAAcjB,YAAUC,YAAOiB,KAAR,2EAACjB,CAAD,OAEvBkB,EAAQnB,YAAUC,YAAOmB,KAAR,qEAACnB,CAAD,qIAgBjBoB,EAAU,SAAC,GAA+E,IAC1FC,EADaC,EAA6E,EAA7EA,YAAa1B,EAAgE,EAAhEA,WAAY2B,EAAoD,EAApDA,SAAU7B,EAA0C,EAA1CA,MAA0C,IAAnCC,eAAmC,MAAzB,KAAyB,EAE9F,OAAQC,GACN,IAAK,UACHyB,EAAS,kBAAC,IAAkBC,GAC5B,MACF,IAAK,WACHD,EAAS,kBAAC,IAAmBC,GAC7B,MACF,QACED,EAAS,kBAAC,IAAWC,EAAc1B,GAEvC,OACE,kBAAC,IAAD,CAAM4B,WAAS,EAACC,UAAU,UACxB,kBAAC,IAAD,CAASC,MAAI,GACX,kBAAC,IAAD,CAAY/B,QAASA,GAAUD,IAEjC,kBAAC,IAAD,CAASgC,MAAI,EAACC,GAAI,GACfJ,GAEF3B,GAAc,kBAAC,IAAD,CAAS8B,MAAI,GAAEL,KA6BrBO,IAnBC,SAAC,GAAD,IAAGhC,EAAH,EAAGA,WAAY2B,EAAf,EAAeA,SAAU1B,EAAzB,EAAyBA,KAAMH,EAA/B,EAA+BA,MAAkBC,GAAjD,EAAsCkC,UAAtC,EAAiDlC,SAAjD,OACd,kBAACgB,EAAD,CAAkBmB,UAAU,WAC1B,kBAACd,EAAD,CAAae,UAAW,GACtB,kBAAC,IAAD,CAAMP,WAAS,EAACT,QAAS,EAAGU,UAAW5B,EAAO,cAAgB,OAC5D,kBAAC,IAAD,CAAM6B,MAAI,EAACM,GAAI,GAAIC,GAAI,GACrB,kBAACf,EAAD,OAEF,kBAAC,IAAD,CAAMQ,MAAI,EAACM,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKnB,GAAI,GACP,kBAACM,EAAD,CAAS1B,MAAOA,EAAOE,WAAYA,EAAYD,QAASA,GACrD4B","file":"component---src-pages-product-digitaltwin-tsx-f30c6cf99b6f517b66be.js","sourcesContent":["import Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Page from 'src/components/Page';\nimport Section from 'src/components/Section';\nimport SubscribeBox from 'src/components/SubscribeBox';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst TypoWrapper = (str: string) => <Typography paragraph>{str}</Typography>;\n\nexport default function DigitalTwin() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page title={t('digitaltwin.title')}>\n      <Section title={t('digitaltwin.title')} variant='h2' buttonText='getDemo'>\n        {tMap('digitaltwin.body', TypoWrapper)}\n      </Section>\n\n      <Section title={t('digitaltwin.section1.title')} flip>\n        {tMap('digitaltwin.section1.body', TypoWrapper)}\n      </Section>\n\n      <Section title={t('digitaltwin.section2.title')}>{tMap('digitaltwin.section2.body', TypoWrapper)}</Section>\n\n      <SubscribeBox />\n    </Page>\n  );\n}\n","import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport Link from './Link';\nimport LinkButton, { LinkButtonProps } from './LinkButton';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button: React.ExoticComponent<ButtonProps> = React.forwardRef((props, ref) => (\n  <StyledButton variant='outlined' {...props} ref={ref} />\n));\n\nconst ButtonGetDemo: typeof Button = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore: typeof LinkButton = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <LinkButton buttonVariant='outlined' {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </LinkButton>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n","import { ButtonProps, withTheme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid, { GridProps } from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport React from 'react';\nimport Button, { ButtonGetDemo, ButtonReadMore } from 'src/components/Button';\nimport GridBox from 'src/components/GridBox';\nimport { px } from 'src/utils/theme';\nimport styled from 'styled-components';\nimport { LinkProps } from './Link';\n\nconst SectionContainer = withTheme(styled(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`);\n\nconst StyledPaper = withTheme(styled(Paper)``);\n\nconst Image = withTheme(styled(Box)`\n  height: 100%;\n  width: 100%;\n  min-height: 300px;\n  background-image: linear-gradient(-205deg, #e83d95, #862155 30%, black);\n  border-radius: 8px;\n`);\n\ntype ContentProps = {\n  buttonProps?: ButtonProps & LinkProps;\n  buttonText?: string;\n  children: React.ReactNode;\n  direction?: GridProps['direction'];\n  title: string;\n  variant?: TypographyProps['variant'];\n};\nconst Content = ({ buttonProps, buttonText, children, title, variant = 'h5' }: ContentProps) => {\n  let button;\n  switch (buttonText) {\n    case 'getDemo':\n      button = <ButtonGetDemo {...buttonProps} />;\n      break;\n    case 'readMore':\n      button = <ButtonReadMore {...buttonProps} />;\n      break;\n    default:\n      button = <Button {...buttonProps}>{buttonText}</Button>;\n  }\n  return (\n    <Grid container direction='column'>\n      <GridBox item>\n        <Typography variant={variant}>{title}</Typography>\n      </GridBox>\n      <GridBox item my={5}>\n        {children}\n      </GridBox>\n      {buttonText && <GridBox item>{button}</GridBox>}\n    </Grid>\n  );\n};\n\ninterface SectionProps extends ContentProps {\n  flip?: boolean;\n  tuckImage?: boolean;\n}\n\nconst Section = ({ buttonText, children, flip, title, tuckImage, variant }: SectionProps) => (\n  <SectionContainer component='section'>\n    <StyledPaper elevation={0}>\n      <Grid container spacing={2} direction={flip ? 'row-reverse' : 'row'}>\n        <Grid item xs={12} md={6}>\n          <Image />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Box px={2}>\n            <Content title={title} buttonText={buttonText} variant={variant}>\n              {children}\n            </Content>\n          </Box>\n        </Grid>\n      </Grid>\n    </StyledPaper>\n  </SectionContainer>\n);\n\nexport default Section;\nexport { Section, Content as SectionContent };\n"],"sourceRoot":""}