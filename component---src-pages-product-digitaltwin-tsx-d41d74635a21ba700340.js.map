{"version":3,"sources":["webpack:///./src/components/Image.tsx","webpack:///./src/images/simulation-platform.jpg","webpack:///./src/components/PagePreviewBox.tsx","webpack:///./src/images/digital-twin-full-environment.jpg","webpack:///./src/pages/product/digitaltwin.tsx","webpack:///./src/images/cloud-simulation.jpg","webpack:///./src/components/Button.tsx","webpack:///./src/components/GridBox.tsx","webpack:///./src/utils/addSpacing.ts","webpack:///./src/components/Section.tsx","webpack:///./src/images/digital-twin-lite-environment.jpg","webpack:///./src/images/digital-twin.jpg"],"names":["ImageBase","withTheme","styled","src","rest","Image","props","height","width","minHeight","module","exports","PagePreviewBox","title","link","buttonText","mt","xs","md","p","alignItems","display","flexDirection","mb","to","CloudPreviewBox","t","useTranslation","srcCloudPoster","DigitalTwinPreviewBox","srcDigitalTwinPoster","SimulationPreviewBox","srcSimulationPoster","TypoWrapper","str","i","paragraph","key","DigitalTwin","tMap","tuckImage","variant","container","spacing","item","srcDigitalTwinFull","srcDigitalTwinLite","sm","StyledButton","MuiButton","Button","React","forwardRef","ref","ButtonGetDemo","color","ButtonReadMore","buttonVariant","GridBox","Comp","muiStyled","compose","sizing","addSpacing","Grid","SectionContainer","Container","theme","px","StyledPaper","Paper","TitleGridBox","BodyGridBox","contained","flip","fade","palette","background","default","StyledImage","borderRadius","roundTo","num","toPlaces","Math","round","pow","doubleTwoColumns","TuckingBox","Box","breakpoints","up","ReverseTuckingBox","Content","button","buttonProps","children","direction","justify","Typography","textAlign","undefined","FullWidthSection","component","disableGutters","elevation","Children","toArray","filter","c","Boolean","length","countChildren","Section","image","imageTag","ImageContainerComponent","position"],"mappings":"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","file":"component---src-pages-product-digitaltwin-tsx-d41d74635a21ba700340.js","sourcesContent":["import { withTheme } from '@material-ui/core';\nimport Box, { BoxProps } from '@material-ui/core/Box';\nimport React from 'react';\nimport styled from 'styled-components';\n\nexport interface ImageProps extends BoxProps {\n  src?: HTMLImageElement['src'];\n}\n\n// Set up just a Box with a covering background image.\nconst ImageBase = withTheme(styled(({ src, ...rest }) => <Box {...rest} />)`\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center center;\n`) as React.FC<ImageProps>;\n\n// Add the most common sizing rules\n// Arbitrarily assigned a non-zero value to min-height, so it's never invisible.\nconst Image = (props: ImageProps) => <ImageBase height={1} width={1} minHeight='100px' {...props} />;\n\nexport default Image;\nexport { Image, ImageBase };\n","module.exports = __webpack_public_path__ + \"static/simulation-platform-37a96777ce2c1bf70b36ca13b1c9c458.jpg\";","import Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { ButtonReadMore } from 'src/components/Button';\nimport { ImageBase, ImageProps } from 'src/components/Image';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport srcCloudPoster from 'src/images/cloud-simulation.jpg';\nimport srcDigitalTwinPoster from 'src/images/digital-twin.jpg';\nimport srcSimulationPoster from 'src/images/simulation-platform.jpg';\n\nexport interface PagePreviewBoxProps extends ImageProps {\n  buttonText?: string;\n  link: string;\n}\n\nconst PagePreviewBox = ({ title, buttonText, link, ...rest }: PagePreviewBoxProps) => (\n  <ImageBase mt={{ xs: 8, md: 16 }} p={4} alignItems='center' display='flex' flexDirection='column' {...rest}>\n    <Box mb={3}>\n      <Typography>{title}</Typography>\n    </Box>\n    <Box>\n      <ButtonReadMore to={link} />\n    </Box>\n  </ImageBase>\n);\n\nconst CloudPreviewBox = () => {\n  const { t } = useTranslation();\n  return <PagePreviewBox title={t('cloud.title')} link='/product/cloud' src={srcCloudPoster} />;\n};\n\nconst DigitalTwinPreviewBox = () => {\n  const { t } = useTranslation();\n  return <PagePreviewBox title={t('digitaltwin.title')} link='/product/digitaltwin' src={srcDigitalTwinPoster} />;\n};\n\nconst SimulationPreviewBox = () => {\n  const { t } = useTranslation();\n  return <PagePreviewBox title={t('simulation.title')} link='/product/simulation' src={srcSimulationPoster} />;\n};\n\nexport default PagePreviewBox;\nexport { PagePreviewBox, CloudPreviewBox, SimulationPreviewBox, DigitalTwinPreviewBox };\n","module.exports = __webpack_public_path__ + \"static/digital-twin-full-environment-111153efacfce6debe7581342a733b97.jpg\";","import Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { MapFunction } from 'src/@types/utils';\nimport Page from 'src/components/Page';\nimport { CloudPreviewBox, SimulationPreviewBox } from 'src/components/PagePreviewBox';\nimport Section, { FullWidthSection } from 'src/components/Section';\nimport SubscribeBox from 'src/components/SubscribeBox';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport srcDigitalTwinFull from 'src/images/digital-twin-full-environment.jpg';\nimport srcDigitalTwinLite from 'src/images/digital-twin-lite-environment.jpg';\nimport srcDigitalTwinPoster from 'src/images/digital-twin.jpg';\n\nconst TypoWrapper: MapFunction<string> = (str, i) => (\n  <Typography paragraph key={`paragraph${i}`}>\n    {str}\n  </Typography>\n);\n\nexport default function DigitalTwin() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page title={t('digitaltwin.title')}>\n      <Section buttonText='getDemo' src={srcDigitalTwinPoster} title={t('digitaltwin.title')} tuckImage variant='h3'>\n        {tMap('digitaltwin.body', TypoWrapper)}\n      </Section>\n\n      <Grid container spacing={3}>\n        <Grid item xs={12} md={6}>\n          <FullWidthSection title={t('digitaltwin.section1.title')} src={srcDigitalTwinFull}>\n            {tMap('digitaltwin.section1.body', TypoWrapper)}\n          </FullWidthSection>\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <FullWidthSection title={t('digitaltwin.section2.title')} src={srcDigitalTwinLite}>\n            {tMap('digitaltwin.section2.body', TypoWrapper)}\n          </FullWidthSection>\n        </Grid>\n      </Grid>\n\n      <Grid container>\n        <Grid item xs={12} sm={6}>\n          <CloudPreviewBox />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <SimulationPreviewBox />\n        </Grid>\n      </Grid>\n\n      <SubscribeBox />\n    </Page>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/cloud-simulation-b834b11be46add0489efb4c057935af7.jpg\";","import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport Link from './Link';\nimport LinkButton, { LinkButtonProps } from './LinkButton';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button: React.ForwardRefExoticComponent<ButtonProps> = React.forwardRef((props, ref) => (\n  <StyledButton variant='outlined' {...props} ref={ref} />\n));\n\nconst ButtonGetDemo: typeof Button = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore: typeof LinkButton = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <LinkButton buttonVariant='outlined' {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </LinkButton>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n","import Grid from '@material-ui/core/Grid';\nimport { PropsFor } from '@material-ui/system';\nimport addSpacing from 'src/utils/addSpacing';\n\nconst GridBox = addSpacing(Grid);\nexport type GridBoxProps = PropsFor<typeof GridBox>;\n\nexport default GridBox;\nexport { GridBox };\n","import { styled as muiStyled } from '@material-ui/core/styles';\nimport { compose, spacing, SpacingProps, sizing, SizingProps } from '@material-ui/system';\n\ntype SpacedProps<T = {}> = T &\n  SpacingProps &\n  SizingProps & {\n    component?: React.ComponentType | React.ReactHTMLElement<HTMLElement>;\n  };\n\ntype SpacedComponent<T> = React.FC<SpacedProps<T>>;\n\n// Add the `spacing` and `sizing` props to the component\nconst addSpacing = <T>(Comp: SpacedComponent<T>) => muiStyled(Comp)(compose(spacing, sizing));\n\nexport default addSpacing;\nexport { addSpacing };\nexport type { SpacedComponent, SpacedProps };\n","import { ButtonProps, withTheme } from '@material-ui/core';\nimport Box, { BoxProps } from '@material-ui/core/Box';\nimport Container, { ContainerProps } from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper, { PaperProps } from '@material-ui/core/Paper';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport React from 'react';\nimport Button, { ButtonGetDemo, ButtonReadMore } from 'src/components/Button';\nimport GridBox, { GridBoxProps } from 'src/components/GridBox';\nimport Image, { ImageProps } from 'src/components/Image';\nimport { fade, px } from 'src/utils/theme';\nimport styled from 'styled-components';\nimport { LinkProps } from './Link';\n\nconst SectionContainer = withTheme(styled(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`) as typeof Container;\n\nconst StyledPaper = withTheme(styled(Paper)``) as React.FC<PaperProps>;\n\nconst TitleGridBox = withTheme(styled(GridBox)`\n  text-shadow: 0px 2px black, 0px 2px 10px rgba(0, 0, 0, 0.6);\n`) as React.FC<GridBoxProps>;\n\ninterface StyledBodyGridBoxProps {\n  contained?: boolean;\n  flip?: boolean;\n  tuckImage?: boolean;\n}\n\ninterface BodyGridBoxProps extends GridBoxProps, StyledBodyGridBoxProps {}\n\nconst BodyGridBox = withTheme(styled(({ contained, flip, tuckImage, ...rest }: BodyGridBoxProps) => (\n  <GridBox {...rest} />\n))`\n  ${({ contained, flip, tuckImage, theme }) => `\n  text-shadow: 0px 1px 1px black, 0px 3px 9px rgba(0, 0, 0, 0.6);\n\n  ${\n    tuckImage && contained\n      ? `\n    padding: ${px(theme.spacing(2, flip ? 2 : 0, 2, !flip ? 2 : 0))};\n    background-color: ${fade(theme.palette.background.default, 0.6)};\n    border-radius: 8px;\n    ${!flip ? `margin-left: ${px(theme.spacing(-2))};` : ''}\n  `\n      : ''\n  }\n\n  .MuiTypography-paragraph:last-child {\n    margin-bottom: 0;\n  }\n`}\n`) as React.FC<BodyGridBoxProps>;\n\nconst StyledImage = (props: ImageProps) => <Image minHeight={300} borderRadius='borderRadius' {...props} />;\n\nconst countChildren = (children: React.ReactNode | React.ReactChildren) =>\n  React.Children.toArray(children).filter(c => Boolean(c)).length;\n\nconst roundTo = (num: number, toPlaces = 0) => Math.round(num * Math.pow(10, toPlaces)) / Math.pow(10, toPlaces);\n\nconst twoColumns = roundTo(2 / 12, 4);\n// Must double this, since it's being applied inside a box that's half the normal width.\nconst doubleTwoColumns = twoColumns * 2;\n\nconst TuckingBox = withTheme(styled(Box)`\n  min-height: 300px;\n  width: 100%;\n  height: 100%;\n  position: relative;\n\n  ${({ theme }) => theme.breakpoints.up('md')} {\n    width: ${(1 + doubleTwoColumns) * 100}%;\n  }\n`) as React.FC<BoxProps>;\n\nconst ReverseTuckingBox = withTheme(styled(TuckingBox)`\n  ${({ theme }) => theme.breakpoints.up('md')} {\n    margin-inline-start: ${roundTo(doubleTwoColumns * -100, 4)}%;\n  }\n`) as React.FC<BoxProps>;\n\ntype BaseSectionProps = {\n  children: React.ReactNode;\n  src?: string;\n  title: string;\n  variant?: TypographyProps['variant'];\n};\n\ninterface ContentProps extends BaseSectionProps, StyledBodyGridBoxProps {\n  buttonProps?: ButtonProps & LinkProps;\n  buttonText?: string;\n}\n\ninterface SectionProps extends ContentProps {\n  flip?: boolean;\n  image?: React.ReactNode;\n  minHeight?: GridBoxProps['minHeight'];\n  tuckImage?: boolean;\n}\n\nconst Content = ({\n  buttonProps,\n  buttonText,\n  children,\n  contained,\n  direction = 'column',\n  flip,\n  justify = 'center',\n  title,\n  tuckImage,\n  variant = 'h4',\n  ...rest // Rest allows all props from GridBoxProps to be applied to the containing GridBox component\n}: ContentProps & GridBoxProps) => {\n  let button;\n  switch (buttonText) {\n    case 'getDemo':\n      button = <ButtonGetDemo {...buttonProps} />;\n      break;\n    case 'readMore':\n      button = <ButtonReadMore {...buttonProps} />;\n      break;\n    default:\n      button = <Button {...buttonProps}>{buttonText}</Button>;\n  }\n  return (\n    <GridBox {...rest} direction={direction} justify={justify} container>\n      <TitleGridBox item>\n        <Typography variant={variant}>{title}</Typography>\n      </TitleGridBox>\n      <BodyGridBox item mt={{ xs: 2, md: 5 }} flip={flip} contained={contained} tuckImage={tuckImage}>\n        {children}\n      </BodyGridBox>\n      {buttonText && (\n        <GridBox item mt={{ xs: 2, md: 5 }}>\n          <Box textAlign={!flip && contained ? 'end' : undefined}>{button}</Box>\n        </GridBox>\n      )}\n    </GridBox>\n  );\n};\n\nconst Section = ({\n  buttonText,\n  children,\n  contained,\n  flip,\n  image,\n  minHeight,\n  src,\n  title,\n  tuckImage,\n  variant\n}: SectionProps) => {\n  let imageTag = image || <StyledImage src={src} />;\n  if (tuckImage) {\n    let ImageContainerComponent = TuckingBox;\n    if (flip) {\n      ImageContainerComponent = ReverseTuckingBox;\n    }\n    imageTag = <ImageContainerComponent>{imageTag}</ImageContainerComponent>;\n  }\n\n  // Add a min-height for any h3 variant, if a custom one doesn't exist.\n  if (variant === 'h3' && minHeight == null) {\n    minHeight = { md: 458 };\n  }\n\n  return (\n    <SectionContainer component='section' disableGutters>\n      <StyledPaper elevation={0}>\n        <Grid container spacing={tuckImage ? 0 : 3} direction={flip ? 'row-reverse' : 'row'}>\n          <Grid item xs={12} md={6}>\n            {imageTag}\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Box position='relative'>\n              <Content\n                title={title}\n                buttonText={buttonText}\n                minHeight={minHeight}\n                variant={variant}\n                contained={contained}\n                flip={flip}\n                tuckImage={tuckImage}\n              >\n                {children}\n              </Content>\n            </Box>\n          </Grid>\n        </Grid>\n      </StyledPaper>\n    </SectionContainer>\n  );\n};\n\nconst FullWidthSection = ({ children, src, title, variant = 'h5' }: BaseSectionProps) => (\n  <SectionContainer component='section' disableGutters>\n    <StyledPaper elevation={0}>\n      <Box>\n        {title ? (\n          <Box mb={{ xs: 2, md: 5 }}>\n            <Typography variant={variant}>{title}</Typography>\n          </Box>\n        ) : null}\n        <StyledImage src={src} />\n        {countChildren(children) ? <Box mt={{ xs: 2, md: 5 }}>{children}</Box> : null}\n      </Box>\n    </StyledPaper>\n  </SectionContainer>\n);\n\nexport default Section;\nexport { Section, Content as SectionContent, FullWidthSection };\n","module.exports = __webpack_public_path__ + \"static/digital-twin-lite-environment-30a281d97996f210a5e9e4d56a118a34.jpg\";","module.exports = __webpack_public_path__ + \"static/digital-twin-5c625297589648d7d3a2234052200161.jpg\";"],"sourceRoot":""}