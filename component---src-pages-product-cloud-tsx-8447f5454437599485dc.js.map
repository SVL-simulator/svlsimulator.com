{"version":3,"sources":["webpack:///./src/images/cloud-simulation.jpg","webpack:///./src/components/Button.tsx","webpack:///./src/components/GridBox.tsx","webpack:///./src/utils/addSpacing.ts","webpack:///./src/components/Section.tsx","webpack:///./src/pages/product/cloud.tsx","webpack:///./src/components/Li.tsx"],"names":["module","exports","StyledButton","withTheme","styled","MuiButton","Button","React","forwardRef","props","ref","variant","ButtonGetDemo","t","useTranslation","color","ButtonReadMore","buttonVariant","GridBox","Comp","muiStyled","spacing","addSpacing","Grid","SectionContainer","Container","theme","px","StyledPaper","Paper","Image","src","rest","Box","roundTo","num","toPlaces","Math","round","pow","doubleTwoColumns","TuckingBox","breakpoints","up","ReverseTuckingBox","Content","button","buttonProps","buttonText","children","title","container","direction","item","Typography","my","xs","md","FullWidthSection","component","disableGutters","elevation","mb","Children","toArray","filter","c","Boolean","length","countChildren","mt","Section","flip","image","tuckImage","imageTag","ImageContainerComponent","position","ListItemWrapper","str","i","key","CloudSimAAS","tMap","srcCloudPoster","Li","ListItemText"],"mappings":"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","file":"component---src-pages-product-cloud-tsx-8447f5454437599485dc.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/cloud-simulation-b834b11be46add0489efb4c057935af7.jpg\";","import MuiButton, { ButtonProps } from '@material-ui/core/Button';\nimport { withTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport Link from './Link';\nimport LinkButton, { LinkButtonProps } from './LinkButton';\n\nconst StyledButton = withTheme(styled(MuiButton)``);\n\nconst Button: React.ForwardRefExoticComponent<ButtonProps> = React.forwardRef((props, ref) => (\n  <StyledButton variant='outlined' {...props} ref={ref} />\n));\n\nconst ButtonGetDemo: typeof Button = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <Button color='primary' variant='contained' {...props} ref={ref}>\n      {t('main.buttons.getDemo')}\n    </Button>\n  );\n});\n\nconst ButtonReadMore: typeof LinkButton = React.forwardRef((props, ref) => {\n  const { t } = useTranslation();\n  return (\n    <LinkButton buttonVariant='outlined' {...props} ref={ref}>\n      {t('main.buttons.readMore')}\n    </LinkButton>\n  );\n});\n\nexport default Button;\nexport { Button, ButtonGetDemo, ButtonReadMore };\n","import Grid from '@material-ui/core/Grid';\nimport addSpacing from 'src/utils/addSpacing';\n\nconst GridBox = addSpacing(Grid);\n\nexport default GridBox;\nexport { GridBox };\n","import { styled as muiStyled } from '@material-ui/core/styles';\nimport { spacing, SpacingProps } from '@material-ui/system';\n\ntype SpacedComponent<T> = React.FC<\n  T &\n    SpacingProps & {\n      component?: React.ComponentType | keyof JSX.IntrinsicElements;\n    }\n>;\n\n// Add the `spacing` props to the component\nconst addSpacing = <T>(Comp: React.FC<T>) => muiStyled(Comp)(spacing) as SpacedComponent<T>;\n\nexport default addSpacing;\nexport { addSpacing };\n","import { ButtonProps, withTheme } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Grid, { GridProps } from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\nimport React from 'react';\nimport Button, { ButtonGetDemo, ButtonReadMore } from 'src/components/Button';\nimport GridBox from 'src/components/GridBox';\nimport { px } from 'src/utils/theme';\nimport styled from 'styled-components';\nimport { LinkProps } from './Link';\n\nconst SectionContainer = withTheme(styled(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`);\n\nconst StyledPaper = withTheme(styled(Paper)``);\n\nconst Image = withTheme(styled(({ src, ...rest }) => <Box {...rest} />)`\n  height: 100%;\n  width: 100%;\n  min-height: 300px;\n  background-image: url(${({ src }) => src});\n  background-size: cover;\n  background-position: center center;\n  border-radius: 8px;\n`);\n\nconst countChildren = (children: React.ReactNode | React.ReactChildren) =>\n  React.Children.toArray(children).filter(c => Boolean(c)).length;\n\nconst roundTo = (num: number, toPlaces = 0) => Math.round(num * Math.pow(10, toPlaces)) / Math.pow(10, toPlaces);\n\nconst twoColumns = roundTo(2 / 12, 4);\n// Must double this, since it's being applied inside a box that's half the normal width.\nconst doubleTwoColumns = twoColumns * 2;\n\nconst TuckingBox = withTheme(styled(Box)`\n  min-height: 300px;\n  width: 100%;\n  height: 100%;\n  position: relative;\n\n  ${({ theme }) => theme.breakpoints.up('md')} {\n    width: ${(1 + doubleTwoColumns) * 100}%;\n  }\n`);\n\nconst ReverseTuckingBox = withTheme(styled(TuckingBox)`\n  ${({ theme }) => theme.breakpoints.up('md')} {\n    margin-inline-start: ${roundTo(doubleTwoColumns * -100, 4)}%;\n  }\n`);\n\ntype BaseSectionProps = {\n  children: React.ReactNode;\n  src?: string;\n  title: string;\n  variant?: TypographyProps['variant'];\n};\n\ninterface ContentProps extends BaseSectionProps {\n  buttonProps?: ButtonProps & LinkProps;\n  buttonText?: string;\n  direction?: GridProps['direction'];\n}\n\ninterface SectionProps extends ContentProps {\n  flip?: boolean;\n  image?: React.ReactNode;\n  tuckImage?: boolean;\n}\n\nconst Content = ({ buttonProps, buttonText, children, title, variant = 'h5' }: ContentProps) => {\n  let button;\n  switch (buttonText) {\n    case 'getDemo':\n      button = <ButtonGetDemo {...buttonProps} />;\n      break;\n    case 'readMore':\n      button = <ButtonReadMore {...buttonProps} />;\n      break;\n    default:\n      button = <Button {...buttonProps}>{buttonText}</Button>;\n  }\n  return (\n    <Grid container direction='column'>\n      <GridBox item>\n        <Typography variant={variant}>{title}</Typography>\n      </GridBox>\n      <GridBox item my={{ xs: 2, md: 5 }}>\n        {children}\n      </GridBox>\n      {buttonText && <GridBox item>{button}</GridBox>}\n    </Grid>\n  );\n};\n\nconst Section = ({ buttonText, children, flip, image, src, title, tuckImage, variant }: SectionProps) => {\n  let imageTag = image || <Image src={src} />;\n  if (tuckImage) {\n    let ImageContainerComponent = TuckingBox;\n    if (flip) {\n      ImageContainerComponent = ReverseTuckingBox;\n    }\n    imageTag = <ImageContainerComponent>{imageTag}</ImageContainerComponent>;\n  }\n  return (\n    <SectionContainer component='section' disableGutters>\n      <StyledPaper elevation={0}>\n        <Grid container spacing={tuckImage ? 0 : 3} direction={flip ? 'row-reverse' : 'row'}>\n          <Grid item xs={12} md={6}>\n            {imageTag}\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Box position='relative'>\n              <Content title={title} buttonText={buttonText} variant={variant}>\n                {children}\n              </Content>\n            </Box>\n          </Grid>\n        </Grid>\n      </StyledPaper>\n    </SectionContainer>\n  );\n};\nconst FullWidthSection = ({ children, src, title, variant = 'h5' }: BaseSectionProps) => (\n  <SectionContainer component='section' disableGutters>\n    <StyledPaper elevation={0}>\n      <Box>\n        {title ? (\n          <Box mb={{ xs: 2, md: 5 }}>\n            <Typography variant={variant}>{title}</Typography>\n          </Box>\n        ) : null}\n        <Image src={src} />\n        {countChildren(children) ? <Box mt={{ xs: 2, md: 5 }}>{children}</Box> : null}\n      </Box>\n    </StyledPaper>\n  </SectionContainer>\n);\n\nexport default Section;\nexport { Section, Content as SectionContent, FullWidthSection };\n","import List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport React from 'react';\nimport { MapFunction } from 'src/@types/utils';\nimport Li from 'src/components/Li';\nimport Page from 'src/components/Page';\nimport Section from 'src/components/Section';\nimport SubscribeBox from 'src/components/SubscribeBox';\nimport { useTranslation } from 'src/hooks/useTranslations';\nimport srcCloudPoster from 'src/images/cloud-simulation.jpg';\n\nconst ListItemWrapper: MapFunction = (str, i) => (\n  <ListItem key={`${str}${i}`}>\n    <Li>{str}</Li>\n  </ListItem>\n);\n\nexport default function CloudSimAAS() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page title={t('cloud.title')}>\n      <Section title={t('cloud.title')} variant='h2' buttonText='getDemo' src={srcCloudPoster} tuckImage flip>\n        <List>{tMap('cloud.body', ListItemWrapper)}</List>\n      </Section>\n\n      <SubscribeBox />\n    </Page>\n  );\n}\n","import ListItemText, { ListItemTextProps } from '@material-ui/core/ListItemText';\nimport { withTheme } from '@material-ui/core/styles';\nimport styled from 'styled-components';\n\nconst Li = withTheme(styled(ListItemText)`\n  .MuiTypography-displayBlock {\n    display: inline-block;\n    text-indent: -1em;\n\n    &::before {\n      content: '–';\n      display: inline-block;\n      width: 1em;\n      text-indent: 0.2em;\n    }\n  }\n`);\n\nexport default Li;\nexport { Li };\n"],"sourceRoot":""}