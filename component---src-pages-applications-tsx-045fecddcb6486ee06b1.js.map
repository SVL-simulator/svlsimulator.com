{"version":3,"sources":["webpack:///./src/hooks/useTranslations.ts","webpack:///./src/utils/index.ts","webpack:///./src/components/Section.tsx","webpack:///./src/pages/applications.tsx"],"names":["useTrans","t","useTranslation","tMap","useMemo","str","mapFn","val","Array","map","SectionContainer","themed","Container","theme","px","spacing","StyledPaper","Paper","Image","Box","Section","children","flip","title","variant","component","elevation","container","direction","item","xs","md","p","TypoWrapper","Applications","color"],"mappings":"2JAWMA,EAAW,WAAM,IACbC,EAAMC,cAAND,EAIFE,EAAOC,mBAAQ,kBAAM,SAACC,EAAaC,GAAd,OCZZC,EDYwEN,EAAEI,GCXpFE,aAAuBC,MAAcD,EACnC,CAACA,IDUuFE,IAAIH,GCZrF,IAACC,KDY4F,CAACN,IAE5G,MAAO,CAAEA,IAAGE,U,0iBETd,IAAMO,EAAmBC,YAAOC,IAAPD,CAAH,KACH,gBAAGE,EAAH,EAAGA,MAAH,OAAeC,YAAGD,EAAME,QAAQ,OAM7CC,EAAcL,YAAOM,IAAPN,CAAH,KAEXO,EAAQP,YAAOQ,IAAPR,CAAH,KAkCIS,IApBC,SAAC,GAA4D,IAA1DC,EAA0D,EAA1DA,SAAUC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,MAA0C,IAAnCC,eAAmC,MAAzB,KAAyB,EAC3E,OACE,kBAACd,EAAD,CAAkBe,UAAU,WAC1B,kBAACT,EAAD,CAAaU,UAAW,GACtB,kBAAC,IAAD,CAAMC,WAAS,EAACZ,QAAS,EAAGa,UAAWN,EAAO,cAAgB,OAC5D,kBAAC,IAAD,CAAMO,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACb,EAAD,OAEF,kBAAC,IAAD,CAAMW,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAAC,IAAD,CAAKC,EAAG,GACN,kBAAC,IAAD,CAAYR,QAASA,GAAUD,GAC9BF,S,kCC3Cf,oIAOMY,EAAc,SAAC5B,GAAD,OAAiB,kBAAC,IAAD,KAAaA,IAEnC,SAAS6B,IAAe,MACjBhC,cAAZD,EAD6B,EAC7BA,EAAGE,EAD0B,EAC1BA,KAEX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASoB,MAAOtB,EAAE,sBAAuBuB,QAAQ,MAC9CrB,EAAK,oBAAqB8B,GAC3B,kBAAC,IAAD,CAAQE,MAAM,UAAUX,QAAQ,aAC7BvB,EAAE,0BAIP,kBAAC,IAAD,CAASqB,MAAI,EAACC,MAAOtB,EAAE,gCACpBE,EAAK,6BAA8B8B,IAGtC,kBAAC,IAAD,CAASV,MAAOtB,EAAE,gCAAiCE,EAAK,6BAA8B8B,IAEtF,kBAAC,IAAD,CAASX,MAAI,EAACC,MAAOtB,EAAE,gCACpBE,EAAK,6BAA8B8B","file":"component---src-pages-applications-tsx-045fecddcb6486ee06b1.js","sourcesContent":["import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next'; // UseTranslationResponse\nimport { asArray } from '../utils'; // UseTranslationResponse\n\ntype MapFunctionType = (element: any, index?: number, array?: any[]) => unknown;\n\ninterface TranslationMapArgs {\n  translationString: string;\n  mapFn: MapFunctionType;\n}\n\nconst useTrans = () => {\n  const { t } = useTranslation();\n\n  // `tMap` ensures that a translation string will be returned as an array with 1 or more elements.\n  // This allows you to stamp out multiple components dynamically, rather than manually.\n  const tMap = useMemo(() => (str: string, mapFn: MapFunctionType): unknown[] => asArray(t(str)).map(mapFn), [t]);\n\n  return { t, tMap };\n\n  // DEV NOTE: Retaining this just in case we need to augment the output of the standard `t` function. -BS\n  //\n  // const fancyT = (str) => {\n  //   const trans = t(str);\n  //   if (typeof trans === 'string') return trans;\n  //   return trans as string[];\n  // }\n  // return {t: fancyT};\n};\n\nexport default useTrans;\nexport { useTrans as useTranslation, asArray };\n","// Generic utility functions\n//\n\n// Ensures that regardless of what is passed in, you get an array back.\nconst asArray = (val: any | any[]) => {\n  if ((val as any) instanceof Array) return val;\n  return [val];\n};\n\nexport { asArray };\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport { px, themed } from '../utils/theme';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography, { TypographyProps } from '@material-ui/core/Typography';\n\nconst SectionContainer = themed(Container)`\n  margin-bottom: ${({ theme }) => px(theme.spacing(9))};\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nconst StyledPaper = themed(Paper)``;\n\nconst Image = themed(Box)`\n  height: 100%;\n  width: 100%;\n  background-image: linear-gradient(-205deg, white, #9C27B0 30%, black);\n  border-radius: 20px;\n`;\n\ninterface SectionProps {\n  children?: React.ReactNode;\n  flip?: boolean;\n  title?: string;\n  variant?: TypographyProps['variant'];\n}\n\nconst Section = ({ children, flip, title, variant = 'h3' }: SectionProps) => {\n  return (\n    <SectionContainer component='section'>\n      <StyledPaper elevation={3}>\n        <Grid container spacing={2} direction={flip ? 'row-reverse' : 'row'}>\n          <Grid item xs={12} md={6}>\n            <Image />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Box p={2}>\n              <Typography variant={variant}>{title}</Typography>\n              {children}\n            </Box>\n          </Grid>\n        </Grid>\n      </StyledPaper>\n    </SectionContainer>\n  );\n};\n\nexport default Section;\nexport { Section };\n","import Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Page from '../components/Page';\nimport Section from '../components/Section';\nimport { useTranslation } from '../hooks/useTranslations';\n\nconst TypoWrapper = (str: string) => <Typography>{str}</Typography>;\n\nexport default function Applications() {\n  const { t, tMap } = useTranslation();\n\n  return (\n    <Page>\n      <Section title={t('applications.title')} variant='h2'>\n        {tMap('applications.body', TypoWrapper)}\n        <Button color='primary' variant='contained'>\n          {t('main.buttons.getDemo')}\n        </Button>\n      </Section>\n\n      <Section flip title={t('applications.section1.title')}>\n        {tMap('applications.section1.body', TypoWrapper)}\n      </Section>\n\n      <Section title={t('applications.section2.title')}>{tMap('applications.section2.body', TypoWrapper)}</Section>\n\n      <Section flip title={t('applications.section3.title')}>\n        {tMap('applications.section3.body', TypoWrapper)}\n      </Section>\n    </Page>\n  );\n}\n"],"sourceRoot":""}