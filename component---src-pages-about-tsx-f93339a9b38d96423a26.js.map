{"version":3,"sources":["webpack:///./src/hooks/useTranslations.ts","webpack:///./src/utils/index.ts","webpack:///./src/pages/about.tsx"],"names":["useTrans","t","useTranslation","tMap","useMemo","str","mapFn","val","Array","map","TypoWrapper","About","variant"],"mappings":"2JAYMA,EAAW,WAAM,IACbC,EAAMC,cAAND,EAIFE,EAAOC,mBAAQ,kBAAM,SAACC,EAAaC,GAAd,OCZZC,EDYwEN,EAAEI,GCVpFE,aAAuBC,MAAcD,EACnC,CAACA,IDSuFE,IAAIH,GCZrF,IAACC,KDY4F,CAACN,IAE5G,MAAO,CAAEA,IAAGE,U,oCEnBd,4GAKMO,EAAc,SAACL,GAAD,OAAiB,kBAAC,IAAD,KAAaA,IAEnC,SAASM,IAAQ,MACVT,cAAZD,EADsB,EACtBA,EAAGE,EADmB,EACnBA,KACX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAYS,QAAQ,MAAMX,EAAE,gBAC5B,kBAAC,IAAD,CAAYW,QAAQ,MAAMX,EAAE,wBAC3BE,EAAK,qBAAsBO,GAC5B,kBAAC,IAAD,CAAYE,QAAQ,MAAMX,EAAE,uBAC3BE,EAAK,oBAAqBO","file":"component---src-pages-about-tsx-f93339a9b38d96423a26.js","sourcesContent":["import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next'; // UseTranslationResponse\nimport { asArray } from '../utils'; // UseTranslationResponse\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype MapFunctionType = (element: any, index?: number, array?: any[]) => unknown;\n\ninterface TranslationMapArgs {\n  translationString: string;\n  mapFn: MapFunctionType;\n}\n\nconst useTrans = () => {\n  const { t } = useTranslation();\n\n  // `tMap` ensures that a translation string will be returned as an array with 1 or more elements.\n  // This allows you to stamp out multiple components dynamically, rather than manually.\n  const tMap = useMemo(() => (str: string, mapFn: MapFunctionType): unknown[] => asArray(t(str)).map(mapFn), [t]);\n\n  return { t, tMap };\n\n  // DEV NOTE: Retaining this just in case we need to augment the output of the standard `t` function. -BS\n  //\n  // const fancyT = (str) => {\n  //   const trans = t(str);\n  //   if (typeof trans === 'string') return trans;\n  //   return trans as string[];\n  // }\n  // return {t: fancyT};\n};\n\nexport default useTrans;\nexport { useTrans as useTranslation, asArray };\n","// Generic utility functions\n//\n\n// Ensures that regardless of what is passed in, you get an array back.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst asArray = (val: any | any[]) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((val as any) instanceof Array) return val;\n  return [val];\n};\n\nexport { asArray };\n","import Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport Page from 'src/components/Page';\nimport { useTranslation } from 'src/hooks/useTranslations';\n\nconst TypoWrapper = (str: string) => <Typography>{str}</Typography>;\n\nexport default function About() {\n  const { t, tMap } = useTranslation();\n  return (\n    <Page>\n      <Typography variant='h1'>{t('about.title')}</Typography>\n      <Typography variant='h2'>{t('about.mission.title')}</Typography>\n      {tMap('about.mission.body', TypoWrapper)}\n      <Typography variant='h2'>{t('about.vision.title')}</Typography>\n      {tMap('about.vision.body', TypoWrapper)}\n    </Page>\n  );\n}\n"],"sourceRoot":""}